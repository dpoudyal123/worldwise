{
  "Print to console": {
    "prefix": "clog",
    "scope": "javascript,typescript,javascriptreact",
    "body": ["console.log($1)"],
    "description": "console.log"
  },
  "reactComponent": {
    "prefix": "rfc",
    "scope": "javascript,typescript,javascriptreact",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      ""
    ],
    "description": "React component"
  },
  "reactComponentWithClass": {
    "prefix": "rfcc",
    "scope": "javascript,typescript,javascriptreact",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div className = '' >",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      ""
    ],
    "description": "React component"
  },
  "reactStyledComponent": {
    "prefix": "rsc",
    "scope": "javascript,typescript,javascriptreact",
    "body": [
      "import styled from 'styled-components'",
      "",
      "const Styled${TM_FILENAME_BASE} = styled.$0``",
      "",
      "function ${TM_FILENAME_BASE}() {",
      "\treturn (",
      "\t\t<Styled${TM_FILENAME_BASE}>",
      "\t\t\t${TM_FILENAME_BASE}",
      "\t\t</Styled${TM_FILENAME_BASE}>",
      "\t)",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}",
      ""
    ],
    "description": "React styled component"
  },
  "Stringify & Print to console": {
    "prefix": "slog",
    "body": ["console.log(JSON.stringify($1, null, 4));"],
    "description": "Stringify and print to output to console"
  },
  "AsyncDescribe": {
    "prefix": "ades",
    "body": [
      "describe('works', () => {",
      "it('works', (done) => {",
      "Promise.resolve()",
      ".then(done)",
      ".catch(done);",
      "})",
      "});"
    ],
    "description": "Create Async Describe block"
  },
  "SyncDescribe": {
    "prefix": "des",
    "body": ["describe('works', () => {", "it('works', () => {});", "});"],
    "description": "Create Async Describe block"
  },
  "SyncIT": {
    "prefix": "sit",
    "body": ["it('works', () => {});"],
    "description": "Create Async Describe block"
  },
  "AsyncIT": {
    "prefix": "ait",
    "body": [
      "it('works', (done) => {",
      "Promise.resolve()",
      ".then(done)",
      ".catch(done);",
      "})"
    ],
    "description": "Create Async Describe block"
  },
  "Use Strict": {
    "prefix": "stct",
    "body": ["'use strict';", "", ""],
    "description": "use strict"
  },
  "Import React": {
    "prefix": "irct",
    "body": ["import React from 'react';", ""]
  },
  "lambda snippet": {
    "prefix": "lmda",
    "body": [
      "'use strict';",
      "",
      "const { parseSqsBodyWIthReceiptHandle, lambdaInvoke } = require('dex-aws');",
      "",
      "function handler(event, context, globals){",
      "}",
      "",
      "module.exports = handler;",
      "module.exports.helper = {};"
    ]
  },
  "lambda env variable logger": {
    "description": "Snippet to print lambda env variable",
    "prefix": "env",
    "body": [
      "'use strict';",
      "const { awsSvc} = require('dex-aws');",
      "awsSvc('Lambda', 'getFunctionConfiguration',",
      "{FunctionName: 'sbd-inbound-dev-processErrors',})",
      ".then(({ Environment: { Variables}}) => {",
      "   console.log(JSON.stringify(Variables,null,4));",
      "})",
      ".catch((e) => {",
      "console.log(`Failed to get configuration because ${e.message}`);",
      "});"
    ]
  },
  "handler, then and catch block": {
    "description": "Snippet to write handler, then and catch",
    "prefix": "htc",
    "body": [
      "const event = {};",
      "handler(event, {}, {})",
      ".then(r => {// eslint-disable-next-line no-console",
      "console.log('final response...', JSON.stringify(r, null, 4)); return r;})",
      ".catch(e => {// eslint-disable-next-line no-console",
      "console.log(JSON.stringify(e.message, null, 4));})"
    ]
  },
  "then and catch block": {
    "description": "Snippet to write handler, then and catch",
    "prefix": "tc",
    "body": [
      ".then(r => {console.log(JSON.stringify(r, null, 4)); return r;})",
      ".catch(e => {console.log(JSON.stringify(e.message, null, 4));})"
    ]
  },
  "then block": {
    "description": "Snippet to write then block",
    "prefix": "ht",
    "body": [".then(r => {console.log(JSON.stringify(r, null, 4)); return r;})"]
  },
  "then block2": {
    "description": "Snippet to write then block",
    "prefix": "ht2",
    "body": [".then(r => {return r;})"]
  },
  "catch block": {
    "description": "Snippet to write catch block",
    "prefix": "hc",
    "body": [".catch(e => {console.log(JSON.stringify(e.message, null, 4));})"]
  },
  "catch block2": {
    "description": "Snippet to write catch block",
    "prefix": "hc2",
    "body": [".catch(e => {console.log(e);})"]
  },
  "comment block": {
    "description": "Snippet for comment block",
    "prefix": "cb",
    "body": ["/*\n\t\n*/"]
  },
  "hander init": {
    "description": "Snipped for handler with batch pg",
    "prefix": "hinit",
    "body": [
      "// event will look like this",
      "const event1 = [{message: {},},];",
      "// or event will look like this",
      " const event2 = {message: [[{}]],};",
      "const event = [];",
      "handler.init({ssmCred:'', event})",
      ".then(() =>handler(event[0], {}, {}).then((r) => {console.log('final response...', JSON.stringify(r, null, 4));return r;}),)",
      ".finally(endConnection);"
    ]
  },
  "importCSSModule": {
    "prefix": "csm",
    "scope": "javascript,typescript,javascriptreact",
    "body": ["import styles from './${TM_FILENAME_BASE}.module.css'"],
    "description": "Import CSS Module as `styles`"
  }
}
